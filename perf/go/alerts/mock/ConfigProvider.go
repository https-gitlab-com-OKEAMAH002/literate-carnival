// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	alerts "go.skia.org/infra/perf/go/alerts"

	mock "github.com/stretchr/testify/mock"
)

// ConfigProvider is an autogenerated mock type for the ConfigProvider type
type ConfigProvider struct {
	mock.Mock
}

// GetAlertConfig provides a mock function with given fields: alertId
func (_m *ConfigProvider) GetAlertConfig(alertId int64) (*alerts.Alert, error) {
	ret := _m.Called(alertId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfig")
	}

	var r0 *alerts.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*alerts.Alert, error)); ok {
		return rf(alertId)
	}
	if rf, ok := ret.Get(0).(func(int64) *alerts.Alert); ok {
		r0 = rf(alertId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alerts.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(alertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAlertConfigs provides a mock function with given fields: ctx, includeDeleted
func (_m *ConfigProvider) GetAllAlertConfigs(ctx context.Context, includeDeleted bool) ([]*alerts.Alert, error) {
	ret := _m.Called(ctx, includeDeleted)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAlertConfigs")
	}

	var r0 []*alerts.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) ([]*alerts.Alert, error)); ok {
		return rf(ctx, includeDeleted)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) []*alerts.Alert); ok {
		r0 = rf(ctx, includeDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*alerts.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, includeDeleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: ctx
func (_m *ConfigProvider) Refresh(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConfigProvider creates a new instance of ConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigProvider {
	mock := &ConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
