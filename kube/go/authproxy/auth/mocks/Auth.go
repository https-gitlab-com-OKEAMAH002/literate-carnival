// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// Init provides a mock function with given fields: ctx
func (_m *Auth) Init(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoggedInAs provides a mock function with given fields: r
func (_m *Auth) LoggedInAs(r *http.Request) (string, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for LoggedInAs")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (string, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginURL provides a mock function with given fields: w, r
func (_m *Auth) LoginURL(w http.ResponseWriter, r *http.Request) string {
	ret := _m.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for LoginURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) string); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
