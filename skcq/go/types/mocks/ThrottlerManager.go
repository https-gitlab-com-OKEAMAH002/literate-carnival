// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	config "go.skia.org/infra/skcq/go/config"

	time "time"
)

// ThrottlerManager is an autogenerated mock type for the ThrottlerManager type
type ThrottlerManager struct {
	mock.Mock
}

// Throttle provides a mock function with given fields: repoBranch, commitTime
func (_m *ThrottlerManager) Throttle(repoBranch string, commitTime time.Time) bool {
	ret := _m.Called(repoBranch, commitTime)

	if len(ret) == 0 {
		panic("no return value specified for Throttle")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, time.Time) bool); ok {
		r0 = rf(repoBranch, commitTime)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateThrottler provides a mock function with given fields: repoBranch, commitTime, throttlerCfg
func (_m *ThrottlerManager) UpdateThrottler(repoBranch string, commitTime time.Time, throttlerCfg *config.ThrottlerCfg) {
	_m.Called(repoBranch, commitTime, throttlerCfg)
}

// NewThrottlerManager creates a new instance of ThrottlerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThrottlerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ThrottlerManager {
	mock := &ThrottlerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
