// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	vfs "go.skia.org/infra/go/vfs"
)

// Aggregator is an autogenerated mock type for the Aggregator type
type Aggregator struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: ctx, fs, currentMilestone, aggregateFilePath, relnotesDir
func (_m *Aggregator) Aggregate(ctx context.Context, fs vfs.FS, currentMilestone int, aggregateFilePath string, relnotesDir string) ([]byte, error) {
	ret := _m.Called(ctx, fs, currentMilestone, aggregateFilePath, relnotesDir)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vfs.FS, int, string, string) ([]byte, error)); ok {
		return rf(ctx, fs, currentMilestone, aggregateFilePath, relnotesDir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vfs.FS, int, string, string) []byte); ok {
		r0 = rf(ctx, fs, currentMilestone, aggregateFilePath, relnotesDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vfs.FS, int, string, string) error); ok {
		r1 = rf(ctx, fs, currentMilestone, aggregateFilePath, relnotesDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNoteFiles provides a mock function with given fields: ctx, fs, notesDir
func (_m *Aggregator) ListNoteFiles(ctx context.Context, fs vfs.FS, notesDir string) ([]string, error) {
	ret := _m.Called(ctx, fs, notesDir)

	if len(ret) == 0 {
		panic("no return value specified for ListNoteFiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vfs.FS, string) ([]string, error)); ok {
		return rf(ctx, fs, notesDir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vfs.FS, string) []string); ok {
		r0 = rf(ctx, fs, notesDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vfs.FS, string) error); ok {
		r1 = rf(ctx, fs, notesDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAggregator creates a new instance of Aggregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggregator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Aggregator {
	mock := &Aggregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
