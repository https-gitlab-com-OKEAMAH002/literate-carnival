// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// GetCode provides a mock function with given fields: hash, fiddleType
func (_m *Store) GetCode(hash string, fiddleType string) (string, error) {
	ret := _m.Called(hash, fiddleType)

	if len(ret) == 0 {
		panic("no return value specified for GetCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(hash, fiddleType)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(hash, fiddleType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(hash, fiddleType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCode provides a mock function with given fields: code, fiddleType
func (_m *Store) PutCode(code string, fiddleType string) (string, error) {
	ret := _m.Called(code, fiddleType)

	if len(ret) == 0 {
		panic("no return value specified for PutCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(code, fiddleType)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(code, fiddleType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(code, fiddleType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
